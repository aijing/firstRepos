package com.aijing.util;

import com.alibaba.fastjson.JSON;
import org.apache.poi.openxml4j.exceptions.InvalidFormatException;
import org.apache.poi.ss.usermodel.*;

import java.io.*;
import java.text.DecimalFormat;
import java.util.*;

/**
 * @Author: aijing
 * @Date: 2019-06-12
 * @Description:
 */
public class ExcelUtil {

    public static void main(String[] args) {
        try {
            File file = new File("D:\\bridge_hotel.xlsx");
            FileInputStream fileInputStream = new FileInputStream(file);
            List<String> headers = Arrays.asList("pms_hotel_id","crs_hotel_id","bzy_hotel_id","hotel_name","used","del_flag","area_code","area_name","city_code","city_name","province_name","province_code");
            List<Map<String, Object>> dataList = readeExcelData(fileInputStream,0,0,1,headers);
            for(Map<String, Object> map : dataList){
                String str  = "insert into hotel_info values('" + map.get("pms_hotel_id")+ "','" + map.get("crs_hotel_id")+"','" + map.get("bzy_hotel_id") +"','" + map.get("hotel_name") +"','" + map.get("used") +"','" + map.get("del_flag") +"','" + map.get("area_code") +"','" + map.get("area_name") +"','" + map.get("city_code")  +"','" + map.get("city_name")  +"','" + map.get("province_code")  +"','" + map.get("province_name") +"');";
                System.out.println(str);
            }
            System.out.println(dataList.size());
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static List<String> readeExcelHeader(InputStream excelInputSteam, int sheetNumber, int headerNumber) throws IOException , InvalidFormatException {
        //要返回的数据
        List<String> headers = new ArrayList<>();
        //生成工作表
        Workbook workbook = WorkbookFactory.create(excelInputSteam);
        Sheet sheet = workbook.getSheetAt(sheetNumber);
        Row header = sheet.getRow(headerNumber);
        DataFormatter dataFormatter = new DataFormatter();
        for (int i = 0; i < header.getLastCellNum(); i++) {
            //获取单元格
            Cell cell = header.getCell(i);
            headers.add(dataFormatter.formatCellValue(cell));
        }
        return headers;
    }

    /**
     *  读取excel文件内容
     * @param excelInputSteam
     * @param sheetNumber
     * @param headerNumber
     * @param rowStart
     * @return
     * @throws IOException
     * @throws InvalidFormatException
     */
    public static List<Map<String, Object>> readeExcelData(InputStream excelInputSteam, int sheetNumber, int headerNumber, int rowStart,List<String> headers) throws IOException, InvalidFormatException {
        //需要的变量以及要返回的数据
        List<Map<String, Object>> result = new ArrayList<>();
//        List<String> headers = new ArrayList<String>();
        //生成工作表
        Workbook workbook = WorkbookFactory.create(excelInputSteam);
        Sheet sheet = workbook.getSheetAt(sheetNumber);
        //最后一行数据
        DataFormatter dataFormatter = new DataFormatter();
        if(headers == null || headers.size()==0){
            headers = new ArrayList<>();
            //获取标题信息
            Row header = sheet.getRow(headerNumber);
            for (int i = 0; i < header.getLastCellNum(); ++i) {
                Cell cell = header.getCell(i);
                headers.add(dataFormatter.formatCellValue(cell));
            }
        }
        //获取内容信息
        for (int i = rowStart; i <= sheet.getLastRowNum(); ++i) {
            Row currentRow = sheet.getRow(i);
            if (Objects.isNull(currentRow)) {
                continue;
            }
            Map<String, Object> dataMap = new HashMap<>();
            for (int j = 0; j < currentRow.getLastCellNum(); j++) {
                //将null转化为Blank
                Cell data = currentRow.getCell(j, Row.MissingCellPolicy.CREATE_NULL_AS_BLANK);
                if (Objects.isNull(data)) {     //感觉这个if有点多余
                    dataMap.put(headers.get(j), null);
                } else {
                    switch (data.getCellType()) {   //不同的类型分别进行存储
                        case STRING:
                            dataMap.put(headers.get(j), data.getRichStringCellValue().getString());
                            break;
                        case NUMERIC:
/*                            if (DateUtil.isCellDateFormatted(data)) {
                                dataMap.put(headers.get(j), data.getDateCellValue());
                            } else {
                                dataMap.put(headers.get(j), new DecimalFormat("0").format(data.getNumericCellValue()));
                            }*/
                            break;
                        case FORMULA:
                            dataMap.put(headers.get(j), data.getCellFormula());
                            break;
                        case BOOLEAN:
                            dataMap.put(headers.get(j), data.getBooleanCellValue());
                            break;
                        default:
                            dataMap.put(headers.get(j), null);
                    }
                }
            }
            result.add(dataMap);
        }
        return result;
    }

}
